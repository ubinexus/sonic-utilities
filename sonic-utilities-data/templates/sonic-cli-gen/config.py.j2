{%- from "common.j2" import cli_name -%}
"""
Autogenerated config CLI plugin.
{% if source_template is defined %}
Source template: {{ source_template }}
{% endif %}
{% if source_yang_module is defined %}
Source YANG module: {{ source_yang_module }}
{% endif %}
"""

import copy
import click
import utilities_common.cli as clicommon
import utilities_common.general as general
from config import config_mgmt


# Load sonic-cfggen from source since /usr/local/bin/sonic-cfggen does not have .py extension.
sonic_cfggen = general.load_module_from_source('sonic_cfggen', '/usr/local/bin/sonic-cfggen')


def exit_with_error(*args, **kwargs):
    """ Print a message with click.secho and abort CLI.

    Args:
        args: Positional arguments to pass to click.secho
        kwargs: Keyword arguments to pass to click.secho
    """

    click.secho(*args, **kwargs)
    raise click.Abort()


def validate_config_or_raise(cfg):
    """ Validate config db data using ConfigMgmt.

    Args:
        cfg (Dict): Config DB data to validate.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    try:
        cfg = sonic_cfggen.FormatConverter.to_serialized(copy.deepcopy(cfg))
        config_mgmt.ConfigMgmt().loadData(cfg)
    except Exception as err:
        raise Exception('Failed to validate configuration: {}'.format(err))


def add_entry_validated(db, table, key, data):
    """ Add new entry in table and validate configuration.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to add new entry to.
        key (Union[str, Tuple]): Key name in the table.
        data (Dict): Entry data.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key in cfg[table]:
        raise Exception(f"{key} already exists")

    cfg[table][key] = data

    validate_config_or_raise(cfg)
    db.set_entry(table, key, data)


def update_entry_validated(db, table, key, data, create_if_not_exists=False):
    """ Update entry in table and validate configuration.
    If attribute value in data is None, the attribute is deleted.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to add new entry to.
        key (Union[str, Tuple]): Key name in the table.
        data (Dict): Entry data.
        create_if_not_exists (bool):
            In case entry does not exists already a new entry
            is not created if this flag is set to False and
            creates a new entry if flag is set to True.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})

    if not data:
        raise Exception(f"No field/values to update {key}")

    if create_if_not_exists:
        cfg[table].setdefault(key, {})

    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")

    entry_changed = False
    for attr, value in data.items():
        if value == cfg[table][key].get(attr):
            continue
        entry_changed = True
        if value is None:
            cfg[table][key].pop(attr, None)
        else:
            cfg[table][key][attr] = value

    if not entry_changed:
        return

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def del_entry_validated(db, table, key):
    """ Delete entry in table and validate configuration.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to add new entry to.
        key (Union[str, Tuple]): Key name in the table.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")

    cfg[table].pop(key)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, None)


def add_list_entry_validated(db, table, key, attr, data):
    """ Add new entry into list in table and validate configuration.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to add data to.
        key (Union[str, Tuple]): Key name in the table.
        attr (str): Attribute name which represents a list the data needs to be added to.
        data (List): Data list to add to config DB.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry in cfg[table][key][attr]:
            raise Exception(f"{entry} already exists")
        cfg[table][key][attr].append(entry)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def del_list_entry_validated(db, table, key, attr, data):
    """ Delete entry from list in table and validate configuration.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to remove data from.
        key (Union[str, Tuple]): Key name in the table.
        attr (str): Attribute name which represents a list the data needs to be removed from.
        data (Dict): Data list to remove from config DB.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry not in cfg[table][key][attr]:
            raise Exception(f"{entry} does not exist")
        cfg[table][key][attr].remove(entry)
    if not cfg[table][key][attr]:
        cfg[table][key].pop(attr)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, cfg[table][key])


def clear_list_entry_validated(db, table, key, attr):
    """ Clear list in object and validate configuration.

    Args:
        db (swsscommon.ConfigDBConnector): Config DB connector obect.
        table (str): Table name to remove the list attribute from.
        key (Union[str, Tuple]): Key name in the table.
        attr (str): Attribute name which represents a list that needs to be removed.
    Raises:
        Exception: when cfg does not satisfy YANG schema.
    """

    update_entry_validated(db, table, key, {attr: None})


{# Generate click arguments macro
Jinja2 Call:
    {{ gen_click_arguments([{"name": "leaf1", "is-leaf-list": False},
                            {"name": "leaf2", "is-leaf-list": Talse}) }}
Result:
@click.argument(
    "leaf1",
    nargs=1,
    required=True,
)
@click.argument(
    "leaf2",
    nargs=-1,
    required=True,
)
#}
{%- macro gen_click_arguments(attrs) -%}
{%- for attr in attrs %}
@click.argument(
    "{{ cli_name(attr.name) }}",
    nargs={% if attr["is-leaf-list"] %}-1{% else %}1{% endif %},
    required=True,
)
{%- endfor %}
{%- endmacro %}


{# Generate click options macro
Jinja2 Call:
    {{ gen_click_arguments([{"name": "leaf1", "is-mandatory": True, "description": "leaf1-desc"},
                            {"name": "leaf2", "is-mandatory": False, "description": "leaf2-desc"}) }}
Result:
@click.option(
    "--leaf1",
    help="leaf1-desc [mandatory]",
)
@click.option(
    "--leaf2",
    help="leaf2-desc",
)
#}
{%- macro gen_click_options(attrs) -%}
{%- for attr in attrs %}
@click.option(
    "--{{ cli_name(attr.name) }}",
    help="{{ attr.description }}{% if attr['is-mandatory'] %}[mandatory]{% endif %}",
)
{%- endfor %}
{%- endmacro %}

{# Generate valid python identifier from input names #}
{% macro pythonize(attrs) -%}
{{ attrs|map(attribute="name")|map("lower")|map("replace", "-", "_")|join(", ") }}
{%- endmacro %}

{% macro gen_cfg_obj_list_update(group, table, object, attr) %}
{% set list_update_group = group + "_" + attr.name %}

@{{ group }}.group(name="{{ cli_name(attr.name) }}",
                   cls=clicommon.AliasedGroup)
def {{ list_update_group }}():
    """ Add/Delete {{ attr.name }} in {{ table.name }} """

    pass

{# Add entries to list attribute config CLI generation
E.g:
    @TABLE_object.command(name="add")
    @click.argument("key1", nargs=1)
    @click.argument("key2", nargs=1)
    @click.argument("attribute", nargs=-1)
    def TABLE_object_attribute_add(db, key1, key2, attribute):
#}
@{{ list_update_group }}.command(name="add")
{{ gen_click_arguments(object["keys"] + [attr]) }}
@clicommon.pass_db
def {{ list_update_group }}_add(
    db,
    {{ pythonize(object["keys"] + [attr]) }}
):
    """ Add {{ attr.name }} in {{ table.name }} """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    attr = "{{ attr.name }}"
    data = {{ pythonize([attr]) }}

    try:
        add_list_entry_validated(db.cfgdb, table, key, attr, data)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


{# Delete entries from list attribute config CLI generation
E.g:
    @TABLE_object.command(name="delete")
    @click.argument("key1", nargs=1)
    @click.argument("key2", nargs=1)
    @click.argument("attribute", nargs=-1)
    def TABLE_object_attribute_delete(db, key1, key2, attribute):
#}
@{{ list_update_group }}.command(name="delete")
{{ gen_click_arguments(object["keys"] + [attr]) }}
@clicommon.pass_db
def {{ list_update_group }}_delete(
    db,
    {{ pythonize(object["keys"] + [attr]) }}
):
    """ Delete {{ attr.name }} in {{ table.name }} """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    attr = "{{ attr.name }}"
    data = {{ pythonize([attr]) }}

    try:
        del_list_entry_validated(db.cfgdb, table, key, attr, data)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")


{# Clear entries from list attribute config CLI generation
E.g:
    @TABLE_object.command(name="delete")
    @click.argument("key1", nargs=1)
    @click.argument("key2", nargs=1)
    def TABLE_object_attribute_clear(db, key1, key2):
#}
@{{ list_update_group }}.command(name="clear")
{{ gen_click_arguments(object["keys"]) }}
@clicommon.pass_db
def {{ list_update_group }}_clear(
    db,
    {{ pythonize(object["keys"]) }}
):
    """ Clear {{ attr.name }} in {{ table.name }} """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    attr = "{{ attr.name }}"

    try:
        clear_list_entry_validated(db.cfgdb, table, key, attr)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")

{% endmacro %}


{% macro gen_cfg_obj_list_update_all(group, table, object) %}
{% for attr in object.attrs %}
{% if attr["is-leaf-list"] %}
{{ gen_cfg_obj_list_update(group, table, object, attr) }}
{% endif %}
{% endfor %}
{% endmacro %}


{% macro gen_cfg_static_obj_attr(table, object, attr) %}
@{{ table.name }}_{{ object.name }}.command(name="{{ cli_name(attr.name) }}")
{{ gen_click_arguments([attr]) }}
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}_{{ attr.name }}(db, {{ pythonize([attr]) }}):
    """ {{ attr.description }} """

    table = "{{ table.name }}"
    key = "{{ object.name }}"
    data = {
        "{{ attr.name }}": {{ pythonize([attr]) }},
    }
    try:
        update_entry_validated(db.cfgdb, table, key, data, create_if_not_exists=True)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")
{% endmacro %}


{# Static objects config CLI generation
E.g:
    @TABLE.group(name="object")
    def TABLE_object(db):
#}
{% macro gen_cfg_static_obj(table, object) %}
@{{ table.name }}.group(name="{{ cli_name(object.name) }}",
                        cls=clicommon.AliasedGroup)
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}(db):
    """ {{ object.description }} """

    pass

{# Static objects attributes config CLI generation
E.g:
    @TABLE_object.command(name="attribute")
    def TABLE_object_attribute(db, attribute):
#}
{% for attr in object.attrs %}
{{ gen_cfg_static_obj_attr(table, object, attr) }}
{% endfor %}

{{ gen_cfg_obj_list_update_all(table.name + "_" + object.name, table, object) }}
{% endmacro %}

{# Dynamic objects config CLI generation #}

{# Dynamic objects add command
E.g:
    @TABLE.command(name="add")
    @click.argument("key1")
    @click.argument("key2")
    @click.option("--attr1")
    @click.option("--attr2")
    @click.option("--attr3")
    def TABLE_TABLE_LIST_add(db, key1, key2, attr1, attr2, attr3):
#}
{% macro gen_cfg_dyn_obj_add(group, table, object) %}
@{{ group }}.command(name="add")
{{ gen_click_arguments(object["keys"]) }}
{{ gen_click_options(object.attrs) }}
@clicommon.pass_db
def {{ group }}_add(db, {{ pythonize(object["keys"] + object.attrs) }}):
    """ Add object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    data = {}
{%- for attr in object.attrs %}
    if {{ pythonize([attr]) }} is not None:
{%- if not attr["is-leaf-list"] %}
        data["{{ attr.name }}"] = {{ pythonize([attr]) }}
{%- else %}
        data["{{ attr.name }}"] = {{ pythonize([attr]) }}.split(",")
{%- endif %}
{%- endfor %}

    try:
        add_entry_validated(db.cfgdb, table, key, data)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")
{% endmacro %}

{# Dynamic objects update command
E.g:
    @TABLE.command(name="update")
    @click.argument("key1")
    @click.argument("key2")
    @click.option("--attr1")
    @click.option("--attr2")
    @click.option("--attr3")
    def TABLE_TABLE_LIST_update(db, key1, key2, attr1, attr2, attr3):
#}
{% macro gen_cfg_dyn_obj_update(group, table, object) %}
@{{ group }}.command(name="update")
{{ gen_click_arguments(object["keys"]) }}
{{ gen_click_options(object.attrs) }}
@clicommon.pass_db
def {{ group }}_update(db, {{ pythonize(object["keys"] + object.attrs) }}):
    """ Update object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    data = {}
{%- for attr in object.attrs %}
    if {{ pythonize([attr]) }} is not None:
{%- if not attr["is-leaf-list"] %}
        data["{{ attr.name }}"] = {{ pythonize([attr]) }}
{%- else %}
        data["{{ attr.name }}"] = {{ pythonize([attr]) }}.split(",")
{%- endif %}
{%- endfor %}

    try:
        update_entry_validated(db.cfgdb, table, key, data)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")
{% endmacro %}

{# Dynamic objects delete command
E.g:
    @TABLE.command(name="delete")
    @click.argument("key1")
    @click.argument("key2")
    def TABLE_TABLE_LIST_delete(db, key1, key2):
#}
{% macro gen_cfg_dyn_obj_delete(group, table, object) %}
@{{ group }}.command(name="delete")
{{ gen_click_arguments(object["keys"]) }}
@clicommon.pass_db
def {{ group }}_delete(db, {{ pythonize(object["keys"]) }}):
    """ Delete object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ pythonize(object["keys"]) }}
    try:
        del_entry_validated(db.cfgdb, table, key)
    except Exception as err:
        exit_with_error(f"Error: {err}", fg="red")
{% endmacro %}

{% macro gen_cfg_dyn_obj(table, object) %}
{# Generate another nested group in case table holds two types of objects #}
{% if table["dynamic-objects"]|length > 1 %}
{% set group = table.name + "_" + object.name %}
@{{ table.name }}.group(name="{{ cli_name(object.name) }}",
                        cls=clicommon.AliasedGroup)
def {{ group }}():
    """ {{ object.description }} """

    pass
{% else %}
{% set group = table.name %}
{% endif %}

{{ gen_cfg_dyn_obj_add(group, table, object) }}
{{ gen_cfg_dyn_obj_update(group, table, object) }}
{{ gen_cfg_dyn_obj_delete(group, table, object) }}
{{ gen_cfg_obj_list_update_all(group, table, object) }}
{% endmacro %}


{% for table in tables %}
{% if 'config' not in table or table['config'] == 'true' %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }} """

    pass

{% if "static-objects" in table %}
{% for object in table["static-objects"] %}
{{ gen_cfg_static_obj(table, object) }}
{% endfor %}
{% endif %}

{% if "dynamic-objects" in table %}
{% for object in table["dynamic-objects"] %}
{{ gen_cfg_dyn_obj(table, object) }}
{% endfor %}
{% endif %}

{% endif %}
{% endfor %}

def register(cli):
    """ Register new CLI nodes in root CLI.

    Args:
        cli: Root CLI node.
    Raises:
        Exception: when root CLI already has a command
                   we are trying to register.
    """

{%- for table in tables %}
{%- if 'config' not in table or table['config'] == 'true' %}
    cli_node = {{ table.name }}
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command({{ table.name }})
{%- endif %}
{%- endfor %}
