"""
Show CLI plugin for the SONiC Power over Ethernet feature.
This file is auto-generated by sonic-cli-gen tool but adjusted to meet PoE HLD requirenments.
"""

import click
import tabulate
import natsort
import utilities_common.cli as clicommon


ASTERISK = '*'
N_A = 'N/A'
CURRENT = 'current'
POWER = 'power'
VOLTAGE = 'voltage'
TEMPERATURE = 'temperature'


def _format_attr_value(entry, attr):
    """ Helper that formats attribute to be presented in the table output.

    Args:
        entry (Dict[str, str]): CONFIG DB entry configuration.
        attr (Dict): Attribute metadata.

    Returns:
        str: fomatted attribute value.
    """

    return entry.get(attr["name"], "N/A")


def _get_value(value):
    return value if value not in [None, ''] else N_A


def _format_value(key, value):
    units = {
        CURRENT: 'A',
        POWER: 'W',
        VOLTAGE: 'V',
        TEMPERATURE: 'C'
    }

    formatted_value = _get_value(value)
    if formatted_value != N_A and key in units:
        return f"{float(formatted_value):.3f} {units[key]}"
    return formatted_value


@click.group(
    name="poe",
    cls=clicommon.AliasedGroup
)
def poe():
    """  Show PoE (Power over Ethernet) feature information """
    pass


# 'status' subcommand ("show poe status")
@poe.group(
    name="status",
    cls=clicommon.AliasedGroup,
    invoke_without_command=True
)
@clicommon.pass_db
def poe_status(db):
    """  Show PoE devices status """

    state_db = db.db.STATE_DB
    delimiter = db.db.get_db_separator(state_db)
    poe_dev_keys = db.db.keys(state_db, f"{'POE_DEVICE_TABLE'}{delimiter}{ASTERISK}")

    if poe_dev_keys is None or not poe_dev_keys:
        click.echo("PoE devices are not configured")
        return

    header = [
        'Id',
        'PoE ports',
        'Total power',
        'Power consump',
        'Power available',
        'Power limit mode',
        'HW info',
        'Version'
    ]
    body = []

    for key in poe_dev_keys:
        fv_list = db.db.get_all(state_db, key)
        total_pwr = _get_value(fv_list.get('total_pwr'))
        pwr_consump = _get_value(fv_list.get('pwr_consump'))
        pwr_avail = N_A
        if total_pwr is not N_A and pwr_consump is not N_A:
            pwr_avail = str(float(total_pwr) - float(pwr_consump))
        row = [
            key.split(delimiter)[1],
            _get_value(fv_list.get('total_ports')),
            _format_value(POWER, total_pwr),
            _format_value(POWER, pwr_consump),
            _format_value(POWER, pwr_avail),
            _get_value(fv_list.get('pwr_limit_mode')),
            _get_value(fv_list.get('hw_info')),
            _get_value(fv_list.get('version')),
        ]
        body.append(row)

    click.echo(tabulate.tabulate(sorted(body), header))


# 'pse' subcommand ("show poe pse ...")
@poe.group(
    name="pse",
    cls=clicommon.AliasedGroup
)
def pse():
    """  Show PSE (Power Sourcing Equipment) information """
    pass


# 'status' subcommand ("show poe pse status")
@pse.group(
    name="status",
    cls=clicommon.AliasedGroup,
    invoke_without_command=True
)
@clicommon.pass_db
def pse_status(db):
    """  Show PSE status """

    state_db = db.db.STATE_DB
    delimiter = db.db.get_db_separator(state_db)
    pse_keys = db.db.keys(state_db, f"{'POE_PSE_TABLE'}{delimiter}{ASTERISK}")

    if pse_keys is None or not pse_keys:
        click.echo("PoE PSE are not configured")
        return

    header = [
        'Id',
        'Status',
        'Temperature',
        'SW ver',
        'HW ver'
    ]

    body = []

    for key in pse_keys:
        fv_list = db.db.get_all(state_db, key)
        row = [
            key.split(delimiter)[1],
            _get_value(fv_list.get('status')),
            _format_value(TEMPERATURE, fv_list.get('temperature')),
            _get_value(fv_list.get('sw_ver')),
            _get_value(fv_list.get('hw_ver'))
        ]
        body.append(row)

    click.echo(tabulate.tabulate(sorted(body), header))


# 'interface' subcommand ("show poe interface ...")
@poe.group(
    name="interface",
    cls=clicommon.AliasedGroup
)
def interface():
    """  Show PoE interface information """
    pass


# 'configuration' subcommand ("show poe interface configuration")
@interface.group(
    name="configuration",
    cls=clicommon.AliasedGroup,
    invoke_without_command=True
)
@clicommon.pass_db
def configuration(db):
    """  Show PoE configuration from Config DB """

    header = [
        'Port',
        'En/Dis',
        'Power limit',
        'Priority'
    ]

    body = []

    table = db.cfgdb.get_table('POE_PORT')
    for key in natsort.natsorted(table):
        entry = table[key]
        if not isinstance(key, tuple):
            key = (key,)

        row = [*key] + [
            _format_attr_value(
                entry,
                {'name': 'enabled',
                 'description': 'PoE status on port. [enable/disable]'
                 }
            ),
            _format_attr_value(
                entry,
                {'name': 'pwr_limit',
                 'description': 'Power limit on PoE port. [0..999]'
                 }
            ),
            _format_attr_value(
                entry,
                {'name': 'priority',
                 'description': 'Port priority level. [crit/high/low]'
                 }
            ),
        ]

        body.append(row)

    click.echo(tabulate.tabulate(body, header))


# 'status' subcommand ("show poe interface status")
@interface.command()
@click.argument(
    "ifname",
    required=False
)
@clicommon.pass_db
def status(db, ifname):
    """  Show details of the PoE interface  """

    state_db = db.db.STATE_DB
    delimiter = db.db.get_db_separator(state_db)
    table = 'POE_PORT_TABLE'

    if ifname is None:
        poe_port_keys = db.db.keys(state_db, f"{table}{delimiter}{ASTERISK}")
    else:
        if not ifname.startswith('Ethernet'):
            click.echo("Invalid ifname argument")
            return
        poe_port_keys = db.db.keys(state_db, f"{table}{delimiter}{ifname}")

    if poe_port_keys is None or not poe_port_keys:
        if ifname is not None:
            click.echo(f"Interface <{ifname}> does not have a PoE configuration")
        else:
            click.echo("PoE interfaces are not configured")
        return

    header = [
        'Port',
        'Status',
        'En/Dis',
        'Priority',
        'Protocol',
        'Class A',
        'Class B',
        'PWR Consump',
        'PWR limit',
        'Voltage',
        'Current',
    ]

    body = []

    for key in poe_port_keys:
        fv_list = db.db.get_all(state_db, key)
        row = [
            key.split(delimiter)[1],
            _get_value(fv_list.get('status')),
            _get_value(fv_list.get('enabled')),
            _get_value(fv_list.get('priority')),
            _get_value(fv_list.get('protocol')),
            _get_value(fv_list.get('class_a')),
            _get_value(fv_list.get('class_b')),
            _format_value(POWER, fv_list.get('pwr_consump')),
            _format_value(POWER, fv_list.get('pwr_limit')),
            _format_value(VOLTAGE, fv_list.get('voltage')),
            _format_value(CURRENT, fv_list.get('current')),
            _get_value(fv_list.get('fp_port'))
        ]
        body.append(row)

    # sort based on 'fp_port'
    try:  # in case fp_port is invalid
        sorted_body = sorted(body, key=lambda x: int(x[-1]) if x[-1] else -1)
    except ValueError:
        sorted_body = body
    # remove the 'fp_port'
    result_body = [sublist[:-1] for sublist in sorted_body]

    click.echo(tabulate.tabulate(result_body, header))


def register(cli):
    """ Register new CLI nodes in root CLI.

    Args:
        cli (click.core.Command): Root CLI node.
    Raises:
        Exception: when root CLI already has a command
                   we are trying to register.
    """

    cli_node = poe
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command(poe)
